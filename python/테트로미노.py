def find(x, y):
    global result
    for i in range(19):
        num = 0
        for j in range(4):
            try:
                nx = x + tetromino[i][j][0] # x
                ny = y + tetromino[i][j][1] # y
                num += graph[nx][ny]
            except:
                continue
        result = max(result, num)
def solve():
    for i in range(n):
        for j in range(m):
            find(i, j)

n, m = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(n)]
result = 0
tetromino = [
    [(0,0), (0,1), (1,0), (1,1)], # ㅁ
    [(0,0), (0,1), (0,2), (0,3)], # ㅡ
    [(0,0), (1,0), (2,0), (3,0)], # ㅣ
    [(0,0), (0,1), (0,2), (1,0)], 
    [(1,0), (1,1), (1,2), (0,2)],
    [(0,0), (1,0), (1,1), (1,2)], # ㄴ
    [(0,0), (0,1), (0,2), (1,2)], # ㄱ
    [(0,0), (1,0), (2,0), (2,1)],
    [(2,0), (2,1), (1,1), (0,1)],
    [(0,0), (0,1), (1,0), (2,0)], 
    [(0,0), (0,1), (1,1), (2,1)],
    [(0,0), (0,1), (0,2), (1,1)], # ㅜ
    [(1,0), (1,1), (1,2), (0,1)], # ㅗ
    [(0,0), (1,0), (2,0), (1,1)], # ㅏ
    [(1,0), (0,1), (1,1), (2,1)], # ㅓ
    [(1,0), (2,0), (0,1), (1,1)],
    [(0,0), (1,0), (1,1), (2,1)],
    [(1,0), (0,1), (1,1), (0,2)],
    [(0,0), (0,1), (1,1), (1,2)]
]
solve()
print(result)

'''
4개의 사각형으로 이루어진 테트리스 형태가 5가지가 있는데
그 형태를 회전시키고 뒤집고 해서 나올수있는 형태가 모두 19가지이다
그 19가지를 하나씩 4개의 사각형을 graph에 대입해 값을 구한다음
최대 값을 계속 갱신해 나간다
만약 도형이 삐져나올 경우를 위해 except를 사용한다
'''